#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from Primary import PrimaryService
from Primary.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  string openSession(OpenSessionRequest request)')
    print('  GetCountryInfoResponse getCountryInfo(string authSessionId, SimCard simCard)')
    print('  GetPhoneVerifMethodResponse getPhoneVerifMethod(string authSessionId, Device device, UserPhoneNumber userPhoneNumber)')
    print('  SendPinCodeForPhoneResponse sendPinCodeForPhone(string authSessionId, Device device, UserPhoneNumber userPhoneNumber, AvailableMethods verifMethod)')
    print('  VerifyPhoneResponse verifyPhone(string authSessionId, Device device, UserPhoneNumber userPhoneNumber, string pinCode)')
    print('  GetAcctVerifMethodResponse getAcctVerifMethod(string authSessionId, AccountIdentifier accountIdentifier)')
    print('  ExchangeEncryptionKeyResponse exchangeEncryptionKey(string authSessionId, ExchangeEncryptionKeyRequest request)')
    print('  SetPasswordResponse setPassword(string authSessionId, EncryptedPassword encryptedPassword)')
    print('  VerifyAccountUsingPwdResponse verifyAccountUsingPwd(string authSessionId, AccountIdentifier accountIdentifier, EncryptedPassword encryptedPassword)')
    print('  GetSecondAuthMethodResponse getSecondAuthMethod(string authSessionId)')
    print('  MigratePrimaryResponse migratePrimaryUsingSocialLogin(string authSessionId)')
    print('  MigratePrimaryResponse migratePrimaryUsingPhone(string authSessionId)')
    print('  MigratePrimaryResponse registerPrimaryUsingSocialLogin(string authSessionId)')
    print('  MigratePrimaryResponse registerPrimaryUsingPhone(string authSessionId)')
    print('  ValidateProfileResponse validateProfile(string authSessionId, string displayName)')
    print('  IssueWebAuthDetailsForAcctVerifResponse issueWebAuthDetailsForAcctVerif(string authSessionId, AccountIdentifier accountIdentifier)')
    print('  VerifySocialLoginResponse verifySocialLogin(string authSessionId, Device device, SocialLogin socialLogin)')
    print('  Settings getSettingsAttributes2( attributesToRetrieve)')
    print('  Settings getSettingsAttributes(i32 attrBitset)')
    print('  void updateSettingsAttribute(i32 reqSeq, Attr attr, string value)')
    print('   updateSettingsAttributes2(i32 reqSeq,  attributesToUpdate, Settings settings)')
    print('  Profile getProfile(SyncReason syncReason)')
    print('  void updateProfileAttribute(i32 reqSeq, ProfileAttribute attr, string value)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = PrimaryService.Client(protocol)
transport.open()

if cmd == 'openSession':
    if len(args) != 1:
        print('openSession requires 1 args')
        sys.exit(1)
    pp.pprint(client.openSession(eval(args[0]),))

elif cmd == 'getCountryInfo':
    if len(args) != 2:
        print('getCountryInfo requires 2 args')
        sys.exit(1)
    pp.pprint(client.getCountryInfo(args[0], eval(args[1]),))

elif cmd == 'getPhoneVerifMethod':
    if len(args) != 3:
        print('getPhoneVerifMethod requires 3 args')
        sys.exit(1)
    pp.pprint(client.getPhoneVerifMethod(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'sendPinCodeForPhone':
    if len(args) != 4:
        print('sendPinCodeForPhone requires 4 args')
        sys.exit(1)
    pp.pprint(client.sendPinCodeForPhone(args[0], eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'verifyPhone':
    if len(args) != 4:
        print('verifyPhone requires 4 args')
        sys.exit(1)
    pp.pprint(client.verifyPhone(args[0], eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'getAcctVerifMethod':
    if len(args) != 2:
        print('getAcctVerifMethod requires 2 args')
        sys.exit(1)
    pp.pprint(client.getAcctVerifMethod(args[0], eval(args[1]),))

elif cmd == 'exchangeEncryptionKey':
    if len(args) != 2:
        print('exchangeEncryptionKey requires 2 args')
        sys.exit(1)
    pp.pprint(client.exchangeEncryptionKey(args[0], eval(args[1]),))

elif cmd == 'setPassword':
    if len(args) != 2:
        print('setPassword requires 2 args')
        sys.exit(1)
    pp.pprint(client.setPassword(args[0], eval(args[1]),))

elif cmd == 'verifyAccountUsingPwd':
    if len(args) != 3:
        print('verifyAccountUsingPwd requires 3 args')
        sys.exit(1)
    pp.pprint(client.verifyAccountUsingPwd(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'getSecondAuthMethod':
    if len(args) != 1:
        print('getSecondAuthMethod requires 1 args')
        sys.exit(1)
    pp.pprint(client.getSecondAuthMethod(args[0],))

elif cmd == 'migratePrimaryUsingSocialLogin':
    if len(args) != 1:
        print('migratePrimaryUsingSocialLogin requires 1 args')
        sys.exit(1)
    pp.pprint(client.migratePrimaryUsingSocialLogin(args[0],))

elif cmd == 'migratePrimaryUsingPhone':
    if len(args) != 1:
        print('migratePrimaryUsingPhone requires 1 args')
        sys.exit(1)
    pp.pprint(client.migratePrimaryUsingPhone(args[0],))

elif cmd == 'registerPrimaryUsingSocialLogin':
    if len(args) != 1:
        print('registerPrimaryUsingSocialLogin requires 1 args')
        sys.exit(1)
    pp.pprint(client.registerPrimaryUsingSocialLogin(args[0],))

elif cmd == 'registerPrimaryUsingPhone':
    if len(args) != 1:
        print('registerPrimaryUsingPhone requires 1 args')
        sys.exit(1)
    pp.pprint(client.registerPrimaryUsingPhone(args[0],))

elif cmd == 'validateProfile':
    if len(args) != 2:
        print('validateProfile requires 2 args')
        sys.exit(1)
    pp.pprint(client.validateProfile(args[0], args[1],))

elif cmd == 'issueWebAuthDetailsForAcctVerif':
    if len(args) != 2:
        print('issueWebAuthDetailsForAcctVerif requires 2 args')
        sys.exit(1)
    pp.pprint(client.issueWebAuthDetailsForAcctVerif(args[0], eval(args[1]),))

elif cmd == 'verifySocialLogin':
    if len(args) != 3:
        print('verifySocialLogin requires 3 args')
        sys.exit(1)
    pp.pprint(client.verifySocialLogin(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'getSettingsAttributes2':
    if len(args) != 1:
        print('getSettingsAttributes2 requires 1 args')
        sys.exit(1)
    pp.pprint(client.getSettingsAttributes2(eval(args[0]),))

elif cmd == 'getSettingsAttributes':
    if len(args) != 1:
        print('getSettingsAttributes requires 1 args')
        sys.exit(1)
    pp.pprint(client.getSettingsAttributes(eval(args[0]),))

elif cmd == 'updateSettingsAttribute':
    if len(args) != 3:
        print('updateSettingsAttribute requires 3 args')
        sys.exit(1)
    pp.pprint(client.updateSettingsAttribute(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'updateSettingsAttributes2':
    if len(args) != 3:
        print('updateSettingsAttributes2 requires 3 args')
        sys.exit(1)
    pp.pprint(client.updateSettingsAttributes2(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getProfile':
    if len(args) != 1:
        print('getProfile requires 1 args')
        sys.exit(1)
    pp.pprint(client.getProfile(eval(args[0]),))

elif cmd == 'updateProfileAttribute':
    if len(args) != 3:
        print('updateProfileAttribute requires 3 args')
        sys.exit(1)
    pp.pprint(client.updateProfileAttribute(eval(args[0]), eval(args[1]), args[2],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
